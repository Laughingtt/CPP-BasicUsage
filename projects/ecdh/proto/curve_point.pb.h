// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: curve_point.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_curve_5fpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_curve_5fpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_curve_5fpoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_curve_5fpoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace tutorial {
class CurvePoint;
struct CurvePointDefaultTypeInternal;
extern CurvePointDefaultTypeInternal _CurvePoint_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::CurvePoint* Arena::CreateMaybeMessage<::tutorial::CurvePoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class CurvePoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:tutorial.CurvePoint) */ {
 public:
  inline CurvePoint() : CurvePoint(nullptr) {}
  ~CurvePoint() override;
  explicit constexpr CurvePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurvePoint(const CurvePoint& from);
  CurvePoint(CurvePoint&& from) noexcept
    : CurvePoint() {
    *this = ::std::move(from);
  }

  inline CurvePoint& operator=(const CurvePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurvePoint& operator=(CurvePoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CurvePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurvePoint* internal_default_instance() {
    return reinterpret_cast<const CurvePoint*>(
               &_CurvePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CurvePoint& a, CurvePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(CurvePoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurvePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurvePoint* New() const final {
    return new CurvePoint();
  }

  CurvePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurvePoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CurvePoint& from);
  void MergeFrom(const CurvePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CurvePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.CurvePoint";
  }
  protected:
  explicit CurvePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointListFieldNumber = 1,
  };
  // repeated string point_list = 1;
  int point_list_size() const;
  private:
  int _internal_point_list_size() const;
  public:
  void clear_point_list();
  const std::string& point_list(int index) const;
  std::string* mutable_point_list(int index);
  void set_point_list(int index, const std::string& value);
  void set_point_list(int index, std::string&& value);
  void set_point_list(int index, const char* value);
  void set_point_list(int index, const char* value, size_t size);
  std::string* add_point_list();
  void add_point_list(const std::string& value);
  void add_point_list(std::string&& value);
  void add_point_list(const char* value);
  void add_point_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& point_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_point_list();
  private:
  const std::string& _internal_point_list(int index) const;
  std::string* _internal_add_point_list();
  public:

  // @@protoc_insertion_point(class_scope:tutorial.CurvePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> point_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_curve_5fpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CurvePoint

// repeated string point_list = 1;
inline int CurvePoint::_internal_point_list_size() const {
  return point_list_.size();
}
inline int CurvePoint::point_list_size() const {
  return _internal_point_list_size();
}
inline void CurvePoint::clear_point_list() {
  point_list_.Clear();
}
inline std::string* CurvePoint::add_point_list() {
  std::string* _s = _internal_add_point_list();
  // @@protoc_insertion_point(field_add_mutable:tutorial.CurvePoint.point_list)
  return _s;
}
inline const std::string& CurvePoint::_internal_point_list(int index) const {
  return point_list_.Get(index);
}
inline const std::string& CurvePoint::point_list(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.CurvePoint.point_list)
  return _internal_point_list(index);
}
inline std::string* CurvePoint::mutable_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.CurvePoint.point_list)
  return point_list_.Mutable(index);
}
inline void CurvePoint::set_point_list(int index, const std::string& value) {
  point_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tutorial.CurvePoint.point_list)
}
inline void CurvePoint::set_point_list(int index, std::string&& value) {
  point_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tutorial.CurvePoint.point_list)
}
inline void CurvePoint::set_point_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  point_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tutorial.CurvePoint.point_list)
}
inline void CurvePoint::set_point_list(int index, const char* value, size_t size) {
  point_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tutorial.CurvePoint.point_list)
}
inline std::string* CurvePoint::_internal_add_point_list() {
  return point_list_.Add();
}
inline void CurvePoint::add_point_list(const std::string& value) {
  point_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tutorial.CurvePoint.point_list)
}
inline void CurvePoint::add_point_list(std::string&& value) {
  point_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tutorial.CurvePoint.point_list)
}
inline void CurvePoint::add_point_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  point_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tutorial.CurvePoint.point_list)
}
inline void CurvePoint::add_point_list(const char* value, size_t size) {
  point_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tutorial.CurvePoint.point_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CurvePoint::point_list() const {
  // @@protoc_insertion_point(field_list:tutorial.CurvePoint.point_list)
  return point_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CurvePoint::mutable_point_list() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.CurvePoint.point_list)
  return &point_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_curve_5fpoint_2eproto
